
pipeline {
    agent { label 'built-in' }

    environment {
        TF_VERSION = '1.9.6'
         // folder inside repo with .tf files
    }
    parameters {
      choice(name: 'ENV', choices: ['local', 'staging', 'prod'], description: 'Select environment')
    }
    stages {
        
        

        stage('Checkout Terraform Repo') {
            steps {
                git branch: 'main', credentialsId: 'gitcloner', url: 'git@github.com:tejasbhosale009-maker/devops-challange.git'
            }
        }


        stage('Terraform Format Check') {
          steps {
            script {
              def result = sh(script: 'terraform fmt -write=false -diff -recursive -check terraform/', returnStatus: true)
                if (result != 0) {
                error('Terraform fmt check failed - please format your files!')
                }
            }
          }
        }


        stage('Terraform Validate') {
            steps {
                sh '''
        terraform -chdir=terraform init -backend=false
        terraform -chdir=terraform validate
        '''
                
            }
        }

        

        stage('TFSEC Scan') {
          steps {
            sh 'tfsec --custom-check-dir ./security/scans/tfsec-policies --format sarif --verbose --out tfsec-report.sarif terraform'
            
          }
        }
        stage('Publish SARIF Report') {
            steps {
                recordIssues tools: [sarif(pattern: 'tfsec-report.sarif')]
            }
        }
        /*
          stage('TFLint') {
      steps {
        sh 'tflint --init --chdir=terraform'
        sh 'tflint --chdir=terraform --recursive'
      }
    }
    */
}
}

